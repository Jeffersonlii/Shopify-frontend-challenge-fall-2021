{"version":3,"sources":["env.js","dashboard/add-modal/addmodal.jsx","dashboard/add-modal/addmodal.service.jsx","dashboard/dashboard.jsx","dashboard/dashboard.service.jsx","App.js","reportWebVitals.js","index.js"],"names":["apiURL","Addmodal","props","useState","value","setValue","queriedMovies","setQueriedMovies","undefined","debouncingTimeout","setDebouncingTimeout","isLoading","setIsLoading","history","useHistory","query","URLSearchParams","useLocation","search","alreadyNominated","get","JSON","parse","onClose","setIsOpen","closeable","isOpen","animate","autoFocus","size","SIZE","default","role","ROLE","dialog","onChange","e","target","clearTimeout","setTimeout","searchTerm","axios","headers","then","resp","data","Response","Search","placeholder","clearOnEscape","class","length","id","sort","a","b","Year","map","movie","index","onClick","copy","splice","push","imdbID","stringify","Set","disabled","includes","Title","Dashboard","movies","setMovies","topOfPage","setTopOfPage","memoizedMovies","setMemoizedMovies","location","useEffect","window","onscroll","document","body","scrollTop","documentElement","params","prenominatedIDs","reverse","fetchedMovies","i","temp","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","className","style","flexGrow","shape","SHAPE","circle","kind","KIND","primary","secondary","breakpointCols","1100","700","500","columnClassName","overrides","Root","width","headerImage","Poster","title","n","indexOf","App","engine","Styletron","theme","LightTheme","newestOnTop","rtl","pauseOnFocusLoss","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8c2da3e1.chunk.js","sourcesContent":["const apiKey = `6bc0eaa3`;\r\nexport const apiURL = `http://www.omdbapi.com/?apikey=${apiKey}`;\r\n","import './addmodal.scss';\r\nimport { Modal, ModalHeader, ModalBody, SIZE, ROLE } from 'baseui/modal';\r\nimport { Input } from 'baseui/input';\r\nimport { useState } from 'react';\r\nimport { getMovie } from './addmodal.service';\r\nimport { Button } from 'baseui/button';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { StyledSpinnerNext } from 'baseui/spinner';\r\n\r\nfunction Addmodal(props) {\r\n    const [value, setValue] = useState('');\r\n    const [queriedMovies, setQueriedMovies] = useState([]);\r\n    const [debouncingTimeout, setDebouncingTimeout] = useState(undefined);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const history = useHistory();\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const alreadyNominated = query.get('n') ? JSON.parse(query.get('n')) : [];\r\n    return (\r\n        <Modal\r\n            onClose={() => props.setIsOpen(false)}\r\n            closeable\r\n            isOpen={props.isOpen}\r\n            animate\r\n            autoFocus\r\n            size={SIZE.default}\r\n            role={ROLE.dialog}\r\n        >\r\n            <ModalHeader>Nominate Movie</ModalHeader>\r\n            <ModalBody>\r\n                <Input\r\n                    value={value}\r\n                    onChange={(e) => {\r\n                        setValue(e.target.value);\r\n                        setIsLoading(true);\r\n                        clearTimeout(debouncingTimeout);\r\n                        setDebouncingTimeout(\r\n                            setTimeout(() => {\r\n                                getMovie(e.target.value).then((resp) => {\r\n                                    setIsLoading(false);\r\n\r\n                                    if (resp.data.Response === 'True') {\r\n                                        setQueriedMovies(resp.data.Search);\r\n                                    } else {\r\n                                        setQueriedMovies([]);\r\n                                    }\r\n                                });\r\n                            }, 1000)\r\n                        );\r\n                    }}\r\n                    placeholder=\"Movie\"\r\n                    clearOnEscape\r\n                />\r\n                {isLoading ? (\r\n                    <div class=\"spin\">\r\n                        <StyledSpinnerNext />\r\n                    </div>\r\n                ) : (\r\n                    queriedMovies.length !== 0 && (\r\n                        <div id=\"movies-wrap\">\r\n                            {queriedMovies\r\n                                .sort((a, b) => b.Year - a.Year)\r\n                                .map((movie, index) => {\r\n                                    return (\r\n                                        <Button\r\n                                            key={index}\r\n                                            onClick={() => {\r\n                                                let copy = [...queriedMovies];\r\n                                                copy.splice(index, 1);\r\n                                                setQueriedMovies(copy);\r\n                                                alreadyNominated.push(\r\n                                                    movie.imdbID\r\n                                                );\r\n                                                history.push(\r\n                                                    `/?n=${JSON.stringify([\r\n                                                        ...new Set(\r\n                                                            alreadyNominated\r\n                                                        ),\r\n                                                    ])}`\r\n                                                );\r\n\r\n                                                if (\r\n                                                    alreadyNominated.length >= 5\r\n                                                ) {\r\n                                                    props.setIsOpen(false);\r\n                                                }\r\n                                            }}\r\n                                            disabled={alreadyNominated.includes(\r\n                                                movie.imdbID\r\n                                            )}\r\n                                        >\r\n                                            <div>{movie.Title}</div>\r\n                                            <div>{movie.Year}</div>\r\n                                        </Button>\r\n                                    );\r\n                                })}\r\n                        </div>\r\n                    )\r\n                )}\r\n            </ModalBody>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default Addmodal;\r\n","import { apiURL } from '../../env';\r\nimport axios from 'axios';\r\n\r\nexport const getMovie = (searchTerm) => {\r\n    return axios.get(`${apiURL}&s=${searchTerm}&type=movie`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n};\r\n","import './dashboard.scss';\r\nimport { Button, SIZE, SHAPE, KIND } from 'baseui/button';\r\nimport Plus from 'baseui/icon/plus';\r\nimport { useState, useEffect } from 'react';\r\nimport Addmodal from './add-modal/addmodal';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { getMovieById } from './dashboard.service';\r\nimport { Card, StyledBody, StyledAction } from 'baseui/card';\r\nimport Masonry from 'react-masonry-css';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction Dashboard() {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [movies, setMovies] = useState([]);\r\n    const [topOfPage, setTopOfPage] = useState(true);\r\n    const [memoizedMovies, setMemoizedMovies] = useState({});\r\n    const history = useHistory();\r\n\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.onscroll = () => {\r\n            setTopOfPage(\r\n                !(\r\n                    document.body.scrollTop > 50 ||\r\n                    document.documentElement.scrollTop > 50\r\n                )\r\n            );\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            let params = new URLSearchParams(location.search);\r\n            let prenominatedIDs = [\r\n                // unique ids\r\n                ...new Set(params.get('n') ? JSON.parse(params.get('n')) : []),\r\n            ].reverse();\r\n            let fetchedMovies = [];\r\n\r\n            for (let i = 0; i < prenominatedIDs.length; i++) {\r\n                if (memoizedMovies[prenominatedIDs[i]]) {\r\n                    //get memorized value\r\n                    fetchedMovies.push(memoizedMovies[prenominatedIDs[i]]);\r\n                } else {\r\n                    let resp = await getMovieById(prenominatedIDs[i]);\r\n                    if (resp.data.Response === 'True') {\r\n                        fetchedMovies.push(resp.data);\r\n                    }\r\n                    let temp = memoizedMovies;\r\n                    temp[prenominatedIDs[i]] = resp.data;\r\n                    setMemoizedMovies(temp);\r\n                }\r\n            }\r\n            setMovies(fetchedMovies);\r\n            toast.dark('Updated', {\r\n                position: 'bottom-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: true,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n\r\n            if (fetchedMovies.length >= 5) {\r\n                toast.dark(\"🦄 You've selected 5 nominations!\", {\r\n                    position: 'bottom-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        })();\r\n    }, [location]);\r\n\r\n    return (\r\n        <div className=\"dashboard-host\">\r\n            <div class={`header ${topOfPage ? '' : 'down'}`}>\r\n                <div id=\"title\">Your Nominations</div>\r\n                <div style={{ flexGrow: 999 }}></div>\r\n                <div id=\"add-button\">\r\n                    <Button\r\n                        onClick={() => {\r\n                            setIsOpen(true);\r\n                        }}\r\n                        size={SIZE.default}\r\n                        shape={SHAPE.circle}\r\n                        kind={topOfPage ? KIND.primary : KIND.secondary}\r\n                        disabled={movies.length >= 5}\r\n                    >\r\n                        <Plus />\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div id=\"items-grid\">\r\n                {movies.length === 0 ? (\r\n                    <div id=\"nonebox\">No Movies Nominated</div>\r\n                ) : (\r\n                    <Masonry\r\n                        breakpointCols={{\r\n                            default: 4,\r\n                            1100: 3,\r\n                            700: 2,\r\n                            500: 1,\r\n                        }}\r\n                        className=\"my-masonry-grid\"\r\n                        columnClassName=\"my-masonry-grid_column\"\r\n                    >\r\n                        {movies.map((movie, index) => {\r\n                            return (\r\n                                <div class=\"movie-item\" key={index}>\r\n                                    <Card\r\n                                        overrides={{\r\n                                            Root: { style: { width: '100%' } },\r\n                                        }}\r\n                                        headerImage={\r\n                                            movie.Poster === 'N/A'\r\n                                                ? 'default.jpg'\r\n                                                : movie.Poster\r\n                                        }\r\n                                        title={movie.Title}\r\n                                    >\r\n                                        <StyledBody>{movie.Year}</StyledBody>\r\n                                        <StyledAction>\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    let params = new URLSearchParams(\r\n                                                        location.search\r\n                                                    );\r\n                                                    let n = params.get('n')\r\n                                                        ? JSON.parse(\r\n                                                              params.get('n')\r\n                                                          )\r\n                                                        : [];\r\n                                                    n.splice(\r\n                                                        n.indexOf(movie.imdbID),\r\n                                                        1\r\n                                                    );\r\n                                                    history.push(\r\n                                                        `/?n=${JSON.stringify([\r\n                                                            ...new Set(n),\r\n                                                        ])}`\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                Remove\r\n                                            </Button>\r\n                                        </StyledAction>\r\n                                    </Card>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </Masonry>\r\n                )}\r\n            </div>\r\n\r\n            <Addmodal isOpen={isOpen} setIsOpen={setIsOpen}></Addmodal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","import { apiURL } from '../env';\r\nimport axios from 'axios';\r\n\r\nexport const getMovieById = (id) => {\r\n    return axios.get(`${apiURL}&i=${id}&type=movie`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n};\r\n","import './App.css';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport Dashboard from './dashboard/dashboard';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n    const engine = new Styletron();\n\n    return (\n        <div className=\"App\">\n            <StyletronProvider value={engine}>\n                <BaseProvider theme={LightTheme}>\n                    <Router>\n                        <Dashboard></Dashboard>\n                        <ToastContainer\n                            position=\"bottom-right\"\n                            autoClose={5000}\n                            hideProgressBar\n                            newestOnTop\n                            closeOnClick\n                            rtl={false}\n                            pauseOnFocusLoss\n                            draggable\n                            pauseOnHover\n                        />\n                    </Router>\n                </BaseProvider>\n            </StyletronProvider>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}